#!./ptbash

ARC="" 
PROG=""
STR=""
ARG=""
args=""
NATTCH=false
UUID=$(uuidgen)
PID_list=()
new_PID=""
BBP="====" 
PATTCH=false
v_vall=false

PROGNAME=$(basename $0)

attach_me() 
{  
  PID=$(pgrep -n "$PROG")
  if [[ -z $PID ]]; then
    echo "No se encontró el proceso que buscas"
    #exit 1
  fi
}

launch_strace()
{  
  echo " "
  strace -p $1 -o $2 
  salida_error=$?
  error_t=" --- Error en el $1 con salida de error = $salida_error ---"

  if [ $salida_error -ne 0 ]; then
    echo $error_t | tee -a error.txt
  fi
 
  #tee -a $2 pone el resultado en la salida estándar y en el archivo de depuración 
  echo " "
}

nattch_me() 
{
  for PROG in ${args[@]}; do
    if [ -x $PROG ]; then 
      mkdir -p /$HOME/.scdebug/$PROG
      attach_me
      UUID=$(uuidgen)
      echo strace $STR -p $PID -o $HOME/.scdebug/$PROG/trace_$UUID.txt
      #strace $STR -p $PID -o $HOME/.scdebug/$PROG/trace_$UUID.txt &
      launch_strace $PID $HOME/.scdebug/$PROG/trace_$UUID.txt & 
    else 
      echo "$PROG no existe y no es ejecutable"
    fi
  done
}

stop_me() 
{
  LaunchProg="$PROG" 
  commName=$COMM 
  echo -n "traced_$commName" > /proc/$$/comm
  kill -SIGSTOP $$
  exec $LaunchProg
}

usage()
{
  echo "usage: scdebug [-h] [-sto arg] [-v | -vall] [-nattch progtoattach] [prog [arg1 …]"
  exit 0
}

kill_me() 
{
  PID_list=$(ps -u $USER --no-headers -o pid,stime --sort=stime | awk '{print $1}' | tr '\n' ' ')
  kill -15 $PID_list
  sleep 3
  for new_PID in ${PID_list[@]}; do
    Tracer_PID=$(cat /proc/$new_PID/status | tr -s " " | cut -f2 -d ":" | sed -n '8p')
    if [ $Tracer_PID -ne 0 ] && [ -n $Tracer_PID ]; then 
      kill -9 $Tracer_PID
    fi
  done
  
  PID_list=$(ps -u $USER --no-headers -o pid,stime --sort=stime | awk '{print $1}' | tr '\n' ' ')
  kill -9 $PID_list
  # No hace falta el $() en ninguno de los casos porque no lo estamos asignando a ninguna variable
}

pattch_me() 
{
  for new_PID in ${args[@]}; do 
      PROGM=$(ps -p $new_PID -o comm=)  
    if [ -x $PROGM ]; then #Programa existe y es ejecutable
      mkdir -p /$HOME/.scdebug/$PROGM 
      UUID=$(uuidgen)
      #strace $STR -p $new_PID -o $HOME/.scdebug/$PROGM/trace_$UUID.txt &
      launch_strace $new_PID $HOME/.scdebug/$PROGM/trace_$UUID.txt & 
      echo "El proceso que se ha pasado pertenece al ejecutable: $PROGM"
    fi
  done
}

v_op() {
  for PROG in ${args[@]}; do
    if [ -x $PROG ]; then 
      echo "El programa existe y es ejecutable"
        Trace=$(ls $HOME/.scdebug/$PROG --sort=time | head -n 1)
        Time_trace=$Trace
        echo "    
        ================= COMMAND: $PROG =======================
        = TRACE FILE: $Trace =
        =========== TIME: $(date -r $HOME/.scdebug/$PROG/$Time_trace) ===========
       "  
      # El -r muestra la fecha de la última modificacion
    fi
  done
}

vall_op() {

  for PROG in ${args[@]}; do
    if [ -x $PROG ] && [ $PROG != -* ]; then
      Trace_list=$(ls $HOME/.scdebug/$PROG --sort=time)
      for PROGM in ${Trace_list[@]}; do
        echo "
        =================== COMMAND: $PROG =======================
        = TRACE FILE: $PROGM =
        =========== TIME: $(date -r $HOME/.scdebug/$PROG/$PROGM) ===========
        "  
      done
    fi
  done
}

while [[ $# -gt 0 ]]; do
	case $1 in

    -h | --help )
     	usage
    ;;
  
    -sto)
     	shift
    	STR=$1
    	shift
    ;;

    -nattch)
      NATTCH=true
      shift
      args=("$@")
      nattch_me
      shift
    ;;   

    -v)
      shift
      args=("$@")
      v_op
      v_vall=true
      shift
    ;;

    -vall)
      shift
      args=("$@")
      vall_op
      v_vall=true
      shift
    ;;

    -S)
      shift 
      COMM=$1
      shift  
      PROG=$1
      shift
      args=("$@") 
      stop_me 
    ;;

    -k)
      shift 
      PROG="$1" 
      kill_me 
    ;;

    -pattch)
      PATTCH=true
      shift
      args=("$@") 
      pattch_me
    ;;

    *)    
		  PROG="$1"
      shift
    	args=("$@")
    	break
  	;;
	esac
done

if [[ -n "$PROG" ]]; then  

  if [ "$NATTCH" == false ] && [ "$PATTCH" == false ] && [ "$v_vall" == false ]; then
    if [ -x $PROG ]; then 
      echo "El programa $PROG existe y es ejecutable"
      mkdir -p /$HOME/.scdebug/$PROG
      strace $STR -o $HOME/.scdebug/$PROG/trace_$(uuidgen).txt ./$PROG "$args" &
      #launch_strace $PID $HOME/.scdebug/$PROG/trace_$UUID.txt ./$PROG "$args" &
    fi
  fi

  PID_list=$(ps -u $USER --no-headers -o pid,stime --sort=stime | awk '{print $1}' | tr '\n' ' ')
   
  if [ "$v_vall" == false ]; then
    for new_PID in ${PID_list[@]}; do
      if [ -d /proc/$new_PID ]; then
        #Por hacer un if que me aclare si un proceso se está ejecutando o no
          echo "$BBP Trace PID = $new_PID; Nombre = $(ps -p $new_PID -o comm=) $BBP" 
          echo "$BBP Tracer PID = $(cat /proc/$new_PID/status | grep TracerPid | cut -f2 -d ":") $BBP" 
        Tracer_PID=$(cat /proc/$new_PID/status | grep TracerPid | cut -f2 -d ":") 
        if [ $Tracer_PID -ne 0 ] && [ -n $Tracer_PID ]; then 
          echo "$BBP Nombre del proceso trazador = $(ps -p $Tracer_PID -o comm=) $BBP"
        fi
        echo " "  
      fi
    done
  fi 
else 
	echo "Error: Se debe especificar un programa
	      Haga -h o -help para ayuda"
fi

exit 0